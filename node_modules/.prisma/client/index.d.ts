
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Animais
 * 
 */
export type Animais = $Result.DefaultSelection<Prisma.$AnimaisPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Status: {
  Ativo: 'Ativo',
  Inativo: 'Inativo'
};

export type Status = (typeof Status)[keyof typeof Status]


export const Sexo: {
  M: 'M',
  F: 'F'
};

export type Sexo = (typeof Sexo)[keyof typeof Sexo]


export const SimNao: {
  Sim: 'Sim',
  Não: 'Não'
};

export type SimNao = (typeof SimNao)[keyof typeof SimNao]


export const Porte: {
  Pequeno: 'Pequeno',
  Médio: 'Médio',
  Grande: 'Grande'
};

export type Porte = (typeof Porte)[keyof typeof Porte]

}

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type Sexo = $Enums.Sexo

export const Sexo: typeof $Enums.Sexo

export type SimNao = $Enums.SimNao

export const SimNao: typeof $Enums.SimNao

export type Porte = $Enums.Porte

export const Porte: typeof $Enums.Porte

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.animais`: Exposes CRUD operations for the **Animais** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Animais
    * const animais = await prisma.animais.findMany()
    * ```
    */
  get animais(): Prisma.AnimaisDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Animais: 'Animais'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "animais"
      txIsolationLevel: never
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UsuarioFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UsuarioAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Animais: {
        payload: Prisma.$AnimaisPayload<ExtArgs>
        fields: Prisma.AnimaisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnimaisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimaisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnimaisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimaisPayload>
          }
          findFirst: {
            args: Prisma.AnimaisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimaisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnimaisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimaisPayload>
          }
          findMany: {
            args: Prisma.AnimaisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimaisPayload>[]
          }
          create: {
            args: Prisma.AnimaisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimaisPayload>
          }
          createMany: {
            args: Prisma.AnimaisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AnimaisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimaisPayload>
          }
          update: {
            args: Prisma.AnimaisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimaisPayload>
          }
          deleteMany: {
            args: Prisma.AnimaisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnimaisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AnimaisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnimaisPayload>
          }
          aggregate: {
            args: Prisma.AnimaisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnimais>
          }
          groupBy: {
            args: Prisma.AnimaisGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnimaisGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AnimaisFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.AnimaisAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.AnimaisCountArgs<ExtArgs>
            result: $Utils.Optional<AnimaisCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    animais?: AnimaisOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    animais: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    animais?: boolean | UsuarioCountOutputTypeCountAnimaisArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountAnimaisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimaisWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioMinAggregateOutputType = {
    id_usuario: string | null
    nome: string | null
    email: string | null
    senha: string | null
    status: $Enums.Status | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id_usuario: string | null
    nome: string | null
    email: string | null
    senha: string | null
    status: $Enums.Status | null
  }

  export type UsuarioCountAggregateOutputType = {
    id_usuario: number
    nome: number
    email: number
    senha: number
    status: number
    _all: number
  }


  export type UsuarioMinAggregateInputType = {
    id_usuario?: true
    nome?: true
    email?: true
    senha?: true
    status?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id_usuario?: true
    nome?: true
    email?: true
    senha?: true
    status?: true
  }

  export type UsuarioCountAggregateInputType = {
    id_usuario?: true
    nome?: true
    email?: true
    senha?: true
    status?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id_usuario: string
    nome: string
    email: string
    senha: string
    status: $Enums.Status
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_usuario?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    status?: boolean
    animais?: boolean | Usuario$animaisArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>



  export type UsuarioSelectScalar = {
    id_usuario?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    status?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_usuario" | "nome" | "email" | "senha" | "status", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    animais?: boolean | Usuario$animaisArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      animais: Prisma.$AnimaisPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_usuario: string
      nome: string
      email: string
      senha: string
      status: $Enums.Status
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id_usuario`
     * const usuarioWithId_usuarioOnly = await prisma.usuario.findMany({ select: { id_usuario: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * @param {UsuarioFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const usuario = await prisma.usuario.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UsuarioFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Usuario.
     * @param {UsuarioAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const usuario = await prisma.usuario.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UsuarioAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    animais<T extends Usuario$animaisArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$animaisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimaisPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id_usuario: FieldRef<"Usuario", 'String'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
    readonly status: FieldRef<"Usuario", 'Status'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario findRaw
   */
  export type UsuarioFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Usuario aggregateRaw
   */
  export type UsuarioAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Usuario.animais
   */
  export type Usuario$animaisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animais
     */
    select?: AnimaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animais
     */
    omit?: AnimaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimaisInclude<ExtArgs> | null
    where?: AnimaisWhereInput
    orderBy?: AnimaisOrderByWithRelationInput | AnimaisOrderByWithRelationInput[]
    cursor?: AnimaisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnimaisScalarFieldEnum | AnimaisScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Animais
   */

  export type AggregateAnimais = {
    _count: AnimaisCountAggregateOutputType | null
    _avg: AnimaisAvgAggregateOutputType | null
    _sum: AnimaisSumAggregateOutputType | null
    _min: AnimaisMinAggregateOutputType | null
    _max: AnimaisMaxAggregateOutputType | null
  }

  export type AnimaisAvgAggregateOutputType = {
    idade: number | null
  }

  export type AnimaisSumAggregateOutputType = {
    idade: number | null
  }

  export type AnimaisMinAggregateOutputType = {
    id_animal: string | null
    nome: string | null
    especie: string | null
    sexo: $Enums.Sexo | null
    castracao: $Enums.SimNao | null
    vacina: $Enums.SimNao | null
    idade: number | null
    porte: $Enums.Porte | null
    status: $Enums.Status | null
    data_resgate: Date | null
    observacoes: string | null
    obersavacoes_medicas: string | null
    raca: string | null
    id_usuario: string | null
  }

  export type AnimaisMaxAggregateOutputType = {
    id_animal: string | null
    nome: string | null
    especie: string | null
    sexo: $Enums.Sexo | null
    castracao: $Enums.SimNao | null
    vacina: $Enums.SimNao | null
    idade: number | null
    porte: $Enums.Porte | null
    status: $Enums.Status | null
    data_resgate: Date | null
    observacoes: string | null
    obersavacoes_medicas: string | null
    raca: string | null
    id_usuario: string | null
  }

  export type AnimaisCountAggregateOutputType = {
    id_animal: number
    nome: number
    especie: number
    sexo: number
    castracao: number
    vacina: number
    idade: number
    porte: number
    status: number
    data_resgate: number
    observacoes: number
    obersavacoes_medicas: number
    raca: number
    id_usuario: number
    _all: number
  }


  export type AnimaisAvgAggregateInputType = {
    idade?: true
  }

  export type AnimaisSumAggregateInputType = {
    idade?: true
  }

  export type AnimaisMinAggregateInputType = {
    id_animal?: true
    nome?: true
    especie?: true
    sexo?: true
    castracao?: true
    vacina?: true
    idade?: true
    porte?: true
    status?: true
    data_resgate?: true
    observacoes?: true
    obersavacoes_medicas?: true
    raca?: true
    id_usuario?: true
  }

  export type AnimaisMaxAggregateInputType = {
    id_animal?: true
    nome?: true
    especie?: true
    sexo?: true
    castracao?: true
    vacina?: true
    idade?: true
    porte?: true
    status?: true
    data_resgate?: true
    observacoes?: true
    obersavacoes_medicas?: true
    raca?: true
    id_usuario?: true
  }

  export type AnimaisCountAggregateInputType = {
    id_animal?: true
    nome?: true
    especie?: true
    sexo?: true
    castracao?: true
    vacina?: true
    idade?: true
    porte?: true
    status?: true
    data_resgate?: true
    observacoes?: true
    obersavacoes_medicas?: true
    raca?: true
    id_usuario?: true
    _all?: true
  }

  export type AnimaisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Animais to aggregate.
     */
    where?: AnimaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animais to fetch.
     */
    orderBy?: AnimaisOrderByWithRelationInput | AnimaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnimaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Animais
    **/
    _count?: true | AnimaisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnimaisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnimaisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnimaisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnimaisMaxAggregateInputType
  }

  export type GetAnimaisAggregateType<T extends AnimaisAggregateArgs> = {
        [P in keyof T & keyof AggregateAnimais]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnimais[P]>
      : GetScalarType<T[P], AggregateAnimais[P]>
  }




  export type AnimaisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnimaisWhereInput
    orderBy?: AnimaisOrderByWithAggregationInput | AnimaisOrderByWithAggregationInput[]
    by: AnimaisScalarFieldEnum[] | AnimaisScalarFieldEnum
    having?: AnimaisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnimaisCountAggregateInputType | true
    _avg?: AnimaisAvgAggregateInputType
    _sum?: AnimaisSumAggregateInputType
    _min?: AnimaisMinAggregateInputType
    _max?: AnimaisMaxAggregateInputType
  }

  export type AnimaisGroupByOutputType = {
    id_animal: string
    nome: string
    especie: string | null
    sexo: $Enums.Sexo
    castracao: $Enums.SimNao
    vacina: $Enums.SimNao
    idade: number | null
    porte: $Enums.Porte
    status: $Enums.Status
    data_resgate: Date | null
    observacoes: string | null
    obersavacoes_medicas: string | null
    raca: string
    id_usuario: string | null
    _count: AnimaisCountAggregateOutputType | null
    _avg: AnimaisAvgAggregateOutputType | null
    _sum: AnimaisSumAggregateOutputType | null
    _min: AnimaisMinAggregateOutputType | null
    _max: AnimaisMaxAggregateOutputType | null
  }

  type GetAnimaisGroupByPayload<T extends AnimaisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnimaisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnimaisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnimaisGroupByOutputType[P]>
            : GetScalarType<T[P], AnimaisGroupByOutputType[P]>
        }
      >
    >


  export type AnimaisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_animal?: boolean
    nome?: boolean
    especie?: boolean
    sexo?: boolean
    castracao?: boolean
    vacina?: boolean
    idade?: boolean
    porte?: boolean
    status?: boolean
    data_resgate?: boolean
    observacoes?: boolean
    obersavacoes_medicas?: boolean
    raca?: boolean
    id_usuario?: boolean
    usuario?: boolean | Animais$usuarioArgs<ExtArgs>
  }, ExtArgs["result"]["animais"]>



  export type AnimaisSelectScalar = {
    id_animal?: boolean
    nome?: boolean
    especie?: boolean
    sexo?: boolean
    castracao?: boolean
    vacina?: boolean
    idade?: boolean
    porte?: boolean
    status?: boolean
    data_resgate?: boolean
    observacoes?: boolean
    obersavacoes_medicas?: boolean
    raca?: boolean
    id_usuario?: boolean
  }

  export type AnimaisOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_animal" | "nome" | "especie" | "sexo" | "castracao" | "vacina" | "idade" | "porte" | "status" | "data_resgate" | "observacoes" | "obersavacoes_medicas" | "raca" | "id_usuario", ExtArgs["result"]["animais"]>
  export type AnimaisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | Animais$usuarioArgs<ExtArgs>
  }

  export type $AnimaisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Animais"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id_animal: string
      nome: string
      especie: string | null
      sexo: $Enums.Sexo
      castracao: $Enums.SimNao
      vacina: $Enums.SimNao
      idade: number | null
      porte: $Enums.Porte
      status: $Enums.Status
      data_resgate: Date | null
      observacoes: string | null
      obersavacoes_medicas: string | null
      raca: string
      id_usuario: string | null
    }, ExtArgs["result"]["animais"]>
    composites: {}
  }

  type AnimaisGetPayload<S extends boolean | null | undefined | AnimaisDefaultArgs> = $Result.GetResult<Prisma.$AnimaisPayload, S>

  type AnimaisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnimaisFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnimaisCountAggregateInputType | true
    }

  export interface AnimaisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Animais'], meta: { name: 'Animais' } }
    /**
     * Find zero or one Animais that matches the filter.
     * @param {AnimaisFindUniqueArgs} args - Arguments to find a Animais
     * @example
     * // Get one Animais
     * const animais = await prisma.animais.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnimaisFindUniqueArgs>(args: SelectSubset<T, AnimaisFindUniqueArgs<ExtArgs>>): Prisma__AnimaisClient<$Result.GetResult<Prisma.$AnimaisPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Animais that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnimaisFindUniqueOrThrowArgs} args - Arguments to find a Animais
     * @example
     * // Get one Animais
     * const animais = await prisma.animais.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnimaisFindUniqueOrThrowArgs>(args: SelectSubset<T, AnimaisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnimaisClient<$Result.GetResult<Prisma.$AnimaisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Animais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimaisFindFirstArgs} args - Arguments to find a Animais
     * @example
     * // Get one Animais
     * const animais = await prisma.animais.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnimaisFindFirstArgs>(args?: SelectSubset<T, AnimaisFindFirstArgs<ExtArgs>>): Prisma__AnimaisClient<$Result.GetResult<Prisma.$AnimaisPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Animais that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimaisFindFirstOrThrowArgs} args - Arguments to find a Animais
     * @example
     * // Get one Animais
     * const animais = await prisma.animais.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnimaisFindFirstOrThrowArgs>(args?: SelectSubset<T, AnimaisFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnimaisClient<$Result.GetResult<Prisma.$AnimaisPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Animais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimaisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Animais
     * const animais = await prisma.animais.findMany()
     * 
     * // Get first 10 Animais
     * const animais = await prisma.animais.findMany({ take: 10 })
     * 
     * // Only select the `id_animal`
     * const animaisWithId_animalOnly = await prisma.animais.findMany({ select: { id_animal: true } })
     * 
     */
    findMany<T extends AnimaisFindManyArgs>(args?: SelectSubset<T, AnimaisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnimaisPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Animais.
     * @param {AnimaisCreateArgs} args - Arguments to create a Animais.
     * @example
     * // Create one Animais
     * const Animais = await prisma.animais.create({
     *   data: {
     *     // ... data to create a Animais
     *   }
     * })
     * 
     */
    create<T extends AnimaisCreateArgs>(args: SelectSubset<T, AnimaisCreateArgs<ExtArgs>>): Prisma__AnimaisClient<$Result.GetResult<Prisma.$AnimaisPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Animais.
     * @param {AnimaisCreateManyArgs} args - Arguments to create many Animais.
     * @example
     * // Create many Animais
     * const animais = await prisma.animais.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnimaisCreateManyArgs>(args?: SelectSubset<T, AnimaisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Animais.
     * @param {AnimaisDeleteArgs} args - Arguments to delete one Animais.
     * @example
     * // Delete one Animais
     * const Animais = await prisma.animais.delete({
     *   where: {
     *     // ... filter to delete one Animais
     *   }
     * })
     * 
     */
    delete<T extends AnimaisDeleteArgs>(args: SelectSubset<T, AnimaisDeleteArgs<ExtArgs>>): Prisma__AnimaisClient<$Result.GetResult<Prisma.$AnimaisPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Animais.
     * @param {AnimaisUpdateArgs} args - Arguments to update one Animais.
     * @example
     * // Update one Animais
     * const animais = await prisma.animais.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnimaisUpdateArgs>(args: SelectSubset<T, AnimaisUpdateArgs<ExtArgs>>): Prisma__AnimaisClient<$Result.GetResult<Prisma.$AnimaisPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Animais.
     * @param {AnimaisDeleteManyArgs} args - Arguments to filter Animais to delete.
     * @example
     * // Delete a few Animais
     * const { count } = await prisma.animais.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnimaisDeleteManyArgs>(args?: SelectSubset<T, AnimaisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Animais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimaisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Animais
     * const animais = await prisma.animais.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnimaisUpdateManyArgs>(args: SelectSubset<T, AnimaisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Animais.
     * @param {AnimaisUpsertArgs} args - Arguments to update or create a Animais.
     * @example
     * // Update or create a Animais
     * const animais = await prisma.animais.upsert({
     *   create: {
     *     // ... data to create a Animais
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Animais we want to update
     *   }
     * })
     */
    upsert<T extends AnimaisUpsertArgs>(args: SelectSubset<T, AnimaisUpsertArgs<ExtArgs>>): Prisma__AnimaisClient<$Result.GetResult<Prisma.$AnimaisPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Animais that matches the filter.
     * @param {AnimaisFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const animais = await prisma.animais.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: AnimaisFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Animais.
     * @param {AnimaisAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const animais = await prisma.animais.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: AnimaisAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Animais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimaisCountArgs} args - Arguments to filter Animais to count.
     * @example
     * // Count the number of Animais
     * const count = await prisma.animais.count({
     *   where: {
     *     // ... the filter for the Animais we want to count
     *   }
     * })
    **/
    count<T extends AnimaisCountArgs>(
      args?: Subset<T, AnimaisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnimaisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Animais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimaisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnimaisAggregateArgs>(args: Subset<T, AnimaisAggregateArgs>): Prisma.PrismaPromise<GetAnimaisAggregateType<T>>

    /**
     * Group by Animais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnimaisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnimaisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnimaisGroupByArgs['orderBy'] }
        : { orderBy?: AnimaisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnimaisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnimaisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Animais model
   */
  readonly fields: AnimaisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Animais.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnimaisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends Animais$usuarioArgs<ExtArgs> = {}>(args?: Subset<T, Animais$usuarioArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Animais model
   */
  interface AnimaisFieldRefs {
    readonly id_animal: FieldRef<"Animais", 'String'>
    readonly nome: FieldRef<"Animais", 'String'>
    readonly especie: FieldRef<"Animais", 'String'>
    readonly sexo: FieldRef<"Animais", 'Sexo'>
    readonly castracao: FieldRef<"Animais", 'SimNao'>
    readonly vacina: FieldRef<"Animais", 'SimNao'>
    readonly idade: FieldRef<"Animais", 'Int'>
    readonly porte: FieldRef<"Animais", 'Porte'>
    readonly status: FieldRef<"Animais", 'Status'>
    readonly data_resgate: FieldRef<"Animais", 'DateTime'>
    readonly observacoes: FieldRef<"Animais", 'String'>
    readonly obersavacoes_medicas: FieldRef<"Animais", 'String'>
    readonly raca: FieldRef<"Animais", 'String'>
    readonly id_usuario: FieldRef<"Animais", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Animais findUnique
   */
  export type AnimaisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animais
     */
    select?: AnimaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animais
     */
    omit?: AnimaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimaisInclude<ExtArgs> | null
    /**
     * Filter, which Animais to fetch.
     */
    where: AnimaisWhereUniqueInput
  }

  /**
   * Animais findUniqueOrThrow
   */
  export type AnimaisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animais
     */
    select?: AnimaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animais
     */
    omit?: AnimaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimaisInclude<ExtArgs> | null
    /**
     * Filter, which Animais to fetch.
     */
    where: AnimaisWhereUniqueInput
  }

  /**
   * Animais findFirst
   */
  export type AnimaisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animais
     */
    select?: AnimaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animais
     */
    omit?: AnimaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimaisInclude<ExtArgs> | null
    /**
     * Filter, which Animais to fetch.
     */
    where?: AnimaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animais to fetch.
     */
    orderBy?: AnimaisOrderByWithRelationInput | AnimaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Animais.
     */
    cursor?: AnimaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Animais.
     */
    distinct?: AnimaisScalarFieldEnum | AnimaisScalarFieldEnum[]
  }

  /**
   * Animais findFirstOrThrow
   */
  export type AnimaisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animais
     */
    select?: AnimaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animais
     */
    omit?: AnimaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimaisInclude<ExtArgs> | null
    /**
     * Filter, which Animais to fetch.
     */
    where?: AnimaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animais to fetch.
     */
    orderBy?: AnimaisOrderByWithRelationInput | AnimaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Animais.
     */
    cursor?: AnimaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Animais.
     */
    distinct?: AnimaisScalarFieldEnum | AnimaisScalarFieldEnum[]
  }

  /**
   * Animais findMany
   */
  export type AnimaisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animais
     */
    select?: AnimaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animais
     */
    omit?: AnimaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimaisInclude<ExtArgs> | null
    /**
     * Filter, which Animais to fetch.
     */
    where?: AnimaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Animais to fetch.
     */
    orderBy?: AnimaisOrderByWithRelationInput | AnimaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Animais.
     */
    cursor?: AnimaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Animais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Animais.
     */
    skip?: number
    distinct?: AnimaisScalarFieldEnum | AnimaisScalarFieldEnum[]
  }

  /**
   * Animais create
   */
  export type AnimaisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animais
     */
    select?: AnimaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animais
     */
    omit?: AnimaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimaisInclude<ExtArgs> | null
    /**
     * The data needed to create a Animais.
     */
    data: XOR<AnimaisCreateInput, AnimaisUncheckedCreateInput>
  }

  /**
   * Animais createMany
   */
  export type AnimaisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Animais.
     */
    data: AnimaisCreateManyInput | AnimaisCreateManyInput[]
  }

  /**
   * Animais update
   */
  export type AnimaisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animais
     */
    select?: AnimaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animais
     */
    omit?: AnimaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimaisInclude<ExtArgs> | null
    /**
     * The data needed to update a Animais.
     */
    data: XOR<AnimaisUpdateInput, AnimaisUncheckedUpdateInput>
    /**
     * Choose, which Animais to update.
     */
    where: AnimaisWhereUniqueInput
  }

  /**
   * Animais updateMany
   */
  export type AnimaisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Animais.
     */
    data: XOR<AnimaisUpdateManyMutationInput, AnimaisUncheckedUpdateManyInput>
    /**
     * Filter which Animais to update
     */
    where?: AnimaisWhereInput
    /**
     * Limit how many Animais to update.
     */
    limit?: number
  }

  /**
   * Animais upsert
   */
  export type AnimaisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animais
     */
    select?: AnimaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animais
     */
    omit?: AnimaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimaisInclude<ExtArgs> | null
    /**
     * The filter to search for the Animais to update in case it exists.
     */
    where: AnimaisWhereUniqueInput
    /**
     * In case the Animais found by the `where` argument doesn't exist, create a new Animais with this data.
     */
    create: XOR<AnimaisCreateInput, AnimaisUncheckedCreateInput>
    /**
     * In case the Animais was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnimaisUpdateInput, AnimaisUncheckedUpdateInput>
  }

  /**
   * Animais delete
   */
  export type AnimaisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animais
     */
    select?: AnimaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animais
     */
    omit?: AnimaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimaisInclude<ExtArgs> | null
    /**
     * Filter which Animais to delete.
     */
    where: AnimaisWhereUniqueInput
  }

  /**
   * Animais deleteMany
   */
  export type AnimaisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Animais to delete
     */
    where?: AnimaisWhereInput
    /**
     * Limit how many Animais to delete.
     */
    limit?: number
  }

  /**
   * Animais findRaw
   */
  export type AnimaisFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Animais aggregateRaw
   */
  export type AnimaisAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Animais.usuario
   */
  export type Animais$usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
  }

  /**
   * Animais without action
   */
  export type AnimaisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Animais
     */
    select?: AnimaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Animais
     */
    omit?: AnimaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnimaisInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UsuarioScalarFieldEnum: {
    id_usuario: 'id_usuario',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    status: 'status'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const AnimaisScalarFieldEnum: {
    id_animal: 'id_animal',
    nome: 'nome',
    especie: 'especie',
    sexo: 'sexo',
    castracao: 'castracao',
    vacina: 'vacina',
    idade: 'idade',
    porte: 'porte',
    status: 'status',
    data_resgate: 'data_resgate',
    observacoes: 'observacoes',
    obersavacoes_medicas: 'obersavacoes_medicas',
    raca: 'raca',
    id_usuario: 'id_usuario'
  };

  export type AnimaisScalarFieldEnum = (typeof AnimaisScalarFieldEnum)[keyof typeof AnimaisScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'Sexo'
   */
  export type EnumSexoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sexo'>
    


  /**
   * Reference to a field of type 'Sexo[]'
   */
  export type ListEnumSexoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sexo[]'>
    


  /**
   * Reference to a field of type 'SimNao'
   */
  export type EnumSimNaoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SimNao'>
    


  /**
   * Reference to a field of type 'SimNao[]'
   */
  export type ListEnumSimNaoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SimNao[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Porte'
   */
  export type EnumPorteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Porte'>
    


  /**
   * Reference to a field of type 'Porte[]'
   */
  export type ListEnumPorteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Porte[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id_usuario?: StringFilter<"Usuario"> | string
    nome?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    status?: EnumStatusFilter<"Usuario"> | $Enums.Status
    animais?: AnimaisListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id_usuario?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    status?: SortOrder
    animais?: AnimaisOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id_usuario?: string
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    status?: EnumStatusFilter<"Usuario"> | $Enums.Status
    animais?: AnimaisListRelationFilter
  }, "id_usuario" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id_usuario?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    status?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id_usuario?: StringWithAggregatesFilter<"Usuario"> | string
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
    status?: EnumStatusWithAggregatesFilter<"Usuario"> | $Enums.Status
  }

  export type AnimaisWhereInput = {
    AND?: AnimaisWhereInput | AnimaisWhereInput[]
    OR?: AnimaisWhereInput[]
    NOT?: AnimaisWhereInput | AnimaisWhereInput[]
    id_animal?: StringFilter<"Animais"> | string
    nome?: StringFilter<"Animais"> | string
    especie?: StringNullableFilter<"Animais"> | string | null
    sexo?: EnumSexoFilter<"Animais"> | $Enums.Sexo
    castracao?: EnumSimNaoFilter<"Animais"> | $Enums.SimNao
    vacina?: EnumSimNaoFilter<"Animais"> | $Enums.SimNao
    idade?: IntNullableFilter<"Animais"> | number | null
    porte?: EnumPorteFilter<"Animais"> | $Enums.Porte
    status?: EnumStatusFilter<"Animais"> | $Enums.Status
    data_resgate?: DateTimeNullableFilter<"Animais"> | Date | string | null
    observacoes?: StringNullableFilter<"Animais"> | string | null
    obersavacoes_medicas?: StringNullableFilter<"Animais"> | string | null
    raca?: StringFilter<"Animais"> | string
    id_usuario?: StringNullableFilter<"Animais"> | string | null
    usuario?: XOR<UsuarioNullableScalarRelationFilter, UsuarioWhereInput> | null
  }

  export type AnimaisOrderByWithRelationInput = {
    id_animal?: SortOrder
    nome?: SortOrder
    especie?: SortOrder
    sexo?: SortOrder
    castracao?: SortOrder
    vacina?: SortOrder
    idade?: SortOrder
    porte?: SortOrder
    status?: SortOrder
    data_resgate?: SortOrder
    observacoes?: SortOrder
    obersavacoes_medicas?: SortOrder
    raca?: SortOrder
    id_usuario?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type AnimaisWhereUniqueInput = Prisma.AtLeast<{
    id_animal?: string
    AND?: AnimaisWhereInput | AnimaisWhereInput[]
    OR?: AnimaisWhereInput[]
    NOT?: AnimaisWhereInput | AnimaisWhereInput[]
    nome?: StringFilter<"Animais"> | string
    especie?: StringNullableFilter<"Animais"> | string | null
    sexo?: EnumSexoFilter<"Animais"> | $Enums.Sexo
    castracao?: EnumSimNaoFilter<"Animais"> | $Enums.SimNao
    vacina?: EnumSimNaoFilter<"Animais"> | $Enums.SimNao
    idade?: IntNullableFilter<"Animais"> | number | null
    porte?: EnumPorteFilter<"Animais"> | $Enums.Porte
    status?: EnumStatusFilter<"Animais"> | $Enums.Status
    data_resgate?: DateTimeNullableFilter<"Animais"> | Date | string | null
    observacoes?: StringNullableFilter<"Animais"> | string | null
    obersavacoes_medicas?: StringNullableFilter<"Animais"> | string | null
    raca?: StringFilter<"Animais"> | string
    id_usuario?: StringNullableFilter<"Animais"> | string | null
    usuario?: XOR<UsuarioNullableScalarRelationFilter, UsuarioWhereInput> | null
  }, "id_animal">

  export type AnimaisOrderByWithAggregationInput = {
    id_animal?: SortOrder
    nome?: SortOrder
    especie?: SortOrder
    sexo?: SortOrder
    castracao?: SortOrder
    vacina?: SortOrder
    idade?: SortOrder
    porte?: SortOrder
    status?: SortOrder
    data_resgate?: SortOrder
    observacoes?: SortOrder
    obersavacoes_medicas?: SortOrder
    raca?: SortOrder
    id_usuario?: SortOrder
    _count?: AnimaisCountOrderByAggregateInput
    _avg?: AnimaisAvgOrderByAggregateInput
    _max?: AnimaisMaxOrderByAggregateInput
    _min?: AnimaisMinOrderByAggregateInput
    _sum?: AnimaisSumOrderByAggregateInput
  }

  export type AnimaisScalarWhereWithAggregatesInput = {
    AND?: AnimaisScalarWhereWithAggregatesInput | AnimaisScalarWhereWithAggregatesInput[]
    OR?: AnimaisScalarWhereWithAggregatesInput[]
    NOT?: AnimaisScalarWhereWithAggregatesInput | AnimaisScalarWhereWithAggregatesInput[]
    id_animal?: StringWithAggregatesFilter<"Animais"> | string
    nome?: StringWithAggregatesFilter<"Animais"> | string
    especie?: StringNullableWithAggregatesFilter<"Animais"> | string | null
    sexo?: EnumSexoWithAggregatesFilter<"Animais"> | $Enums.Sexo
    castracao?: EnumSimNaoWithAggregatesFilter<"Animais"> | $Enums.SimNao
    vacina?: EnumSimNaoWithAggregatesFilter<"Animais"> | $Enums.SimNao
    idade?: IntNullableWithAggregatesFilter<"Animais"> | number | null
    porte?: EnumPorteWithAggregatesFilter<"Animais"> | $Enums.Porte
    status?: EnumStatusWithAggregatesFilter<"Animais"> | $Enums.Status
    data_resgate?: DateTimeNullableWithAggregatesFilter<"Animais"> | Date | string | null
    observacoes?: StringNullableWithAggregatesFilter<"Animais"> | string | null
    obersavacoes_medicas?: StringNullableWithAggregatesFilter<"Animais"> | string | null
    raca?: StringWithAggregatesFilter<"Animais"> | string
    id_usuario?: StringNullableWithAggregatesFilter<"Animais"> | string | null
  }

  export type UsuarioCreateInput = {
    id_usuario?: string
    nome: string
    email: string
    senha: string
    status?: $Enums.Status
    animais?: AnimaisCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id_usuario?: string
    nome: string
    email: string
    senha: string
    status?: $Enums.Status
    animais?: AnimaisUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    animais?: AnimaisUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    animais?: AnimaisUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id_usuario?: string
    nome: string
    email: string
    senha: string
    status?: $Enums.Status
  }

  export type UsuarioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type UsuarioUncheckedUpdateManyInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type AnimaisCreateInput = {
    id_animal?: string
    nome: string
    especie?: string | null
    sexo: $Enums.Sexo
    castracao: $Enums.SimNao
    vacina: $Enums.SimNao
    idade?: number | null
    porte: $Enums.Porte
    status?: $Enums.Status
    data_resgate?: Date | string | null
    observacoes?: string | null
    obersavacoes_medicas?: string | null
    raca?: string
    usuario?: UsuarioCreateNestedOneWithoutAnimaisInput
  }

  export type AnimaisUncheckedCreateInput = {
    id_animal?: string
    nome: string
    especie?: string | null
    sexo: $Enums.Sexo
    castracao: $Enums.SimNao
    vacina: $Enums.SimNao
    idade?: number | null
    porte: $Enums.Porte
    status?: $Enums.Status
    data_resgate?: Date | string | null
    observacoes?: string | null
    obersavacoes_medicas?: string | null
    raca?: string
    id_usuario?: string | null
  }

  export type AnimaisUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    especie?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: EnumSexoFieldUpdateOperationsInput | $Enums.Sexo
    castracao?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    vacina?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    porte?: EnumPorteFieldUpdateOperationsInput | $Enums.Porte
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    data_resgate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    obersavacoes_medicas?: NullableStringFieldUpdateOperationsInput | string | null
    raca?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneWithoutAnimaisNestedInput
  }

  export type AnimaisUncheckedUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    especie?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: EnumSexoFieldUpdateOperationsInput | $Enums.Sexo
    castracao?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    vacina?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    porte?: EnumPorteFieldUpdateOperationsInput | $Enums.Porte
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    data_resgate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    obersavacoes_medicas?: NullableStringFieldUpdateOperationsInput | string | null
    raca?: StringFieldUpdateOperationsInput | string
    id_usuario?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnimaisCreateManyInput = {
    id_animal?: string
    nome: string
    especie?: string | null
    sexo: $Enums.Sexo
    castracao: $Enums.SimNao
    vacina: $Enums.SimNao
    idade?: number | null
    porte: $Enums.Porte
    status?: $Enums.Status
    data_resgate?: Date | string | null
    observacoes?: string | null
    obersavacoes_medicas?: string | null
    raca?: string
    id_usuario?: string | null
  }

  export type AnimaisUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    especie?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: EnumSexoFieldUpdateOperationsInput | $Enums.Sexo
    castracao?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    vacina?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    porte?: EnumPorteFieldUpdateOperationsInput | $Enums.Porte
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    data_resgate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    obersavacoes_medicas?: NullableStringFieldUpdateOperationsInput | string | null
    raca?: StringFieldUpdateOperationsInput | string
  }

  export type AnimaisUncheckedUpdateManyInput = {
    nome?: StringFieldUpdateOperationsInput | string
    especie?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: EnumSexoFieldUpdateOperationsInput | $Enums.Sexo
    castracao?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    vacina?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    porte?: EnumPorteFieldUpdateOperationsInput | $Enums.Porte
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    data_resgate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    obersavacoes_medicas?: NullableStringFieldUpdateOperationsInput | string | null
    raca?: StringFieldUpdateOperationsInput | string
    id_usuario?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type AnimaisListRelationFilter = {
    every?: AnimaisWhereInput
    some?: AnimaisWhereInput
    none?: AnimaisWhereInput
  }

  export type AnimaisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id_usuario?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    status?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id_usuario?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    status?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id_usuario?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    status?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type EnumSexoFilter<$PrismaModel = never> = {
    equals?: $Enums.Sexo | EnumSexoFieldRefInput<$PrismaModel>
    in?: $Enums.Sexo[] | ListEnumSexoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sexo[] | ListEnumSexoFieldRefInput<$PrismaModel>
    not?: NestedEnumSexoFilter<$PrismaModel> | $Enums.Sexo
  }

  export type EnumSimNaoFilter<$PrismaModel = never> = {
    equals?: $Enums.SimNao | EnumSimNaoFieldRefInput<$PrismaModel>
    in?: $Enums.SimNao[] | ListEnumSimNaoFieldRefInput<$PrismaModel>
    notIn?: $Enums.SimNao[] | ListEnumSimNaoFieldRefInput<$PrismaModel>
    not?: NestedEnumSimNaoFilter<$PrismaModel> | $Enums.SimNao
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type EnumPorteFilter<$PrismaModel = never> = {
    equals?: $Enums.Porte | EnumPorteFieldRefInput<$PrismaModel>
    in?: $Enums.Porte[] | ListEnumPorteFieldRefInput<$PrismaModel>
    notIn?: $Enums.Porte[] | ListEnumPorteFieldRefInput<$PrismaModel>
    not?: NestedEnumPorteFilter<$PrismaModel> | $Enums.Porte
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type UsuarioNullableScalarRelationFilter = {
    is?: UsuarioWhereInput | null
    isNot?: UsuarioWhereInput | null
  }

  export type AnimaisCountOrderByAggregateInput = {
    id_animal?: SortOrder
    nome?: SortOrder
    especie?: SortOrder
    sexo?: SortOrder
    castracao?: SortOrder
    vacina?: SortOrder
    idade?: SortOrder
    porte?: SortOrder
    status?: SortOrder
    data_resgate?: SortOrder
    observacoes?: SortOrder
    obersavacoes_medicas?: SortOrder
    raca?: SortOrder
    id_usuario?: SortOrder
  }

  export type AnimaisAvgOrderByAggregateInput = {
    idade?: SortOrder
  }

  export type AnimaisMaxOrderByAggregateInput = {
    id_animal?: SortOrder
    nome?: SortOrder
    especie?: SortOrder
    sexo?: SortOrder
    castracao?: SortOrder
    vacina?: SortOrder
    idade?: SortOrder
    porte?: SortOrder
    status?: SortOrder
    data_resgate?: SortOrder
    observacoes?: SortOrder
    obersavacoes_medicas?: SortOrder
    raca?: SortOrder
    id_usuario?: SortOrder
  }

  export type AnimaisMinOrderByAggregateInput = {
    id_animal?: SortOrder
    nome?: SortOrder
    especie?: SortOrder
    sexo?: SortOrder
    castracao?: SortOrder
    vacina?: SortOrder
    idade?: SortOrder
    porte?: SortOrder
    status?: SortOrder
    data_resgate?: SortOrder
    observacoes?: SortOrder
    obersavacoes_medicas?: SortOrder
    raca?: SortOrder
    id_usuario?: SortOrder
  }

  export type AnimaisSumOrderByAggregateInput = {
    idade?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type EnumSexoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sexo | EnumSexoFieldRefInput<$PrismaModel>
    in?: $Enums.Sexo[] | ListEnumSexoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sexo[] | ListEnumSexoFieldRefInput<$PrismaModel>
    not?: NestedEnumSexoWithAggregatesFilter<$PrismaModel> | $Enums.Sexo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSexoFilter<$PrismaModel>
    _max?: NestedEnumSexoFilter<$PrismaModel>
  }

  export type EnumSimNaoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SimNao | EnumSimNaoFieldRefInput<$PrismaModel>
    in?: $Enums.SimNao[] | ListEnumSimNaoFieldRefInput<$PrismaModel>
    notIn?: $Enums.SimNao[] | ListEnumSimNaoFieldRefInput<$PrismaModel>
    not?: NestedEnumSimNaoWithAggregatesFilter<$PrismaModel> | $Enums.SimNao
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSimNaoFilter<$PrismaModel>
    _max?: NestedEnumSimNaoFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type EnumPorteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Porte | EnumPorteFieldRefInput<$PrismaModel>
    in?: $Enums.Porte[] | ListEnumPorteFieldRefInput<$PrismaModel>
    notIn?: $Enums.Porte[] | ListEnumPorteFieldRefInput<$PrismaModel>
    not?: NestedEnumPorteWithAggregatesFilter<$PrismaModel> | $Enums.Porte
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPorteFilter<$PrismaModel>
    _max?: NestedEnumPorteFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type AnimaisCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AnimaisCreateWithoutUsuarioInput, AnimaisUncheckedCreateWithoutUsuarioInput> | AnimaisCreateWithoutUsuarioInput[] | AnimaisUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AnimaisCreateOrConnectWithoutUsuarioInput | AnimaisCreateOrConnectWithoutUsuarioInput[]
    createMany?: AnimaisCreateManyUsuarioInputEnvelope
    connect?: AnimaisWhereUniqueInput | AnimaisWhereUniqueInput[]
  }

  export type AnimaisUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AnimaisCreateWithoutUsuarioInput, AnimaisUncheckedCreateWithoutUsuarioInput> | AnimaisCreateWithoutUsuarioInput[] | AnimaisUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AnimaisCreateOrConnectWithoutUsuarioInput | AnimaisCreateOrConnectWithoutUsuarioInput[]
    createMany?: AnimaisCreateManyUsuarioInputEnvelope
    connect?: AnimaisWhereUniqueInput | AnimaisWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type AnimaisUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AnimaisCreateWithoutUsuarioInput, AnimaisUncheckedCreateWithoutUsuarioInput> | AnimaisCreateWithoutUsuarioInput[] | AnimaisUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AnimaisCreateOrConnectWithoutUsuarioInput | AnimaisCreateOrConnectWithoutUsuarioInput[]
    upsert?: AnimaisUpsertWithWhereUniqueWithoutUsuarioInput | AnimaisUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AnimaisCreateManyUsuarioInputEnvelope
    set?: AnimaisWhereUniqueInput | AnimaisWhereUniqueInput[]
    disconnect?: AnimaisWhereUniqueInput | AnimaisWhereUniqueInput[]
    delete?: AnimaisWhereUniqueInput | AnimaisWhereUniqueInput[]
    connect?: AnimaisWhereUniqueInput | AnimaisWhereUniqueInput[]
    update?: AnimaisUpdateWithWhereUniqueWithoutUsuarioInput | AnimaisUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AnimaisUpdateManyWithWhereWithoutUsuarioInput | AnimaisUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AnimaisScalarWhereInput | AnimaisScalarWhereInput[]
  }

  export type AnimaisUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AnimaisCreateWithoutUsuarioInput, AnimaisUncheckedCreateWithoutUsuarioInput> | AnimaisCreateWithoutUsuarioInput[] | AnimaisUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AnimaisCreateOrConnectWithoutUsuarioInput | AnimaisCreateOrConnectWithoutUsuarioInput[]
    upsert?: AnimaisUpsertWithWhereUniqueWithoutUsuarioInput | AnimaisUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AnimaisCreateManyUsuarioInputEnvelope
    set?: AnimaisWhereUniqueInput | AnimaisWhereUniqueInput[]
    disconnect?: AnimaisWhereUniqueInput | AnimaisWhereUniqueInput[]
    delete?: AnimaisWhereUniqueInput | AnimaisWhereUniqueInput[]
    connect?: AnimaisWhereUniqueInput | AnimaisWhereUniqueInput[]
    update?: AnimaisUpdateWithWhereUniqueWithoutUsuarioInput | AnimaisUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AnimaisUpdateManyWithWhereWithoutUsuarioInput | AnimaisUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AnimaisScalarWhereInput | AnimaisScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutAnimaisInput = {
    create?: XOR<UsuarioCreateWithoutAnimaisInput, UsuarioUncheckedCreateWithoutAnimaisInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAnimaisInput
    connect?: UsuarioWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type EnumSexoFieldUpdateOperationsInput = {
    set?: $Enums.Sexo
  }

  export type EnumSimNaoFieldUpdateOperationsInput = {
    set?: $Enums.SimNao
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type EnumPorteFieldUpdateOperationsInput = {
    set?: $Enums.Porte
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type UsuarioUpdateOneWithoutAnimaisNestedInput = {
    create?: XOR<UsuarioCreateWithoutAnimaisInput, UsuarioUncheckedCreateWithoutAnimaisInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAnimaisInput
    upsert?: UsuarioUpsertWithoutAnimaisInput
    disconnect?: boolean
    delete?: UsuarioWhereInput | boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutAnimaisInput, UsuarioUpdateWithoutAnimaisInput>, UsuarioUncheckedUpdateWithoutAnimaisInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedEnumSexoFilter<$PrismaModel = never> = {
    equals?: $Enums.Sexo | EnumSexoFieldRefInput<$PrismaModel>
    in?: $Enums.Sexo[] | ListEnumSexoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sexo[] | ListEnumSexoFieldRefInput<$PrismaModel>
    not?: NestedEnumSexoFilter<$PrismaModel> | $Enums.Sexo
  }

  export type NestedEnumSimNaoFilter<$PrismaModel = never> = {
    equals?: $Enums.SimNao | EnumSimNaoFieldRefInput<$PrismaModel>
    in?: $Enums.SimNao[] | ListEnumSimNaoFieldRefInput<$PrismaModel>
    notIn?: $Enums.SimNao[] | ListEnumSimNaoFieldRefInput<$PrismaModel>
    not?: NestedEnumSimNaoFilter<$PrismaModel> | $Enums.SimNao
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedEnumPorteFilter<$PrismaModel = never> = {
    equals?: $Enums.Porte | EnumPorteFieldRefInput<$PrismaModel>
    in?: $Enums.Porte[] | ListEnumPorteFieldRefInput<$PrismaModel>
    notIn?: $Enums.Porte[] | ListEnumPorteFieldRefInput<$PrismaModel>
    not?: NestedEnumPorteFilter<$PrismaModel> | $Enums.Porte
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedEnumSexoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sexo | EnumSexoFieldRefInput<$PrismaModel>
    in?: $Enums.Sexo[] | ListEnumSexoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sexo[] | ListEnumSexoFieldRefInput<$PrismaModel>
    not?: NestedEnumSexoWithAggregatesFilter<$PrismaModel> | $Enums.Sexo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSexoFilter<$PrismaModel>
    _max?: NestedEnumSexoFilter<$PrismaModel>
  }

  export type NestedEnumSimNaoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SimNao | EnumSimNaoFieldRefInput<$PrismaModel>
    in?: $Enums.SimNao[] | ListEnumSimNaoFieldRefInput<$PrismaModel>
    notIn?: $Enums.SimNao[] | ListEnumSimNaoFieldRefInput<$PrismaModel>
    not?: NestedEnumSimNaoWithAggregatesFilter<$PrismaModel> | $Enums.SimNao
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSimNaoFilter<$PrismaModel>
    _max?: NestedEnumSimNaoFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedEnumPorteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Porte | EnumPorteFieldRefInput<$PrismaModel>
    in?: $Enums.Porte[] | ListEnumPorteFieldRefInput<$PrismaModel>
    notIn?: $Enums.Porte[] | ListEnumPorteFieldRefInput<$PrismaModel>
    not?: NestedEnumPorteWithAggregatesFilter<$PrismaModel> | $Enums.Porte
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPorteFilter<$PrismaModel>
    _max?: NestedEnumPorteFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type AnimaisCreateWithoutUsuarioInput = {
    id_animal?: string
    nome: string
    especie?: string | null
    sexo: $Enums.Sexo
    castracao: $Enums.SimNao
    vacina: $Enums.SimNao
    idade?: number | null
    porte: $Enums.Porte
    status?: $Enums.Status
    data_resgate?: Date | string | null
    observacoes?: string | null
    obersavacoes_medicas?: string | null
    raca?: string
  }

  export type AnimaisUncheckedCreateWithoutUsuarioInput = {
    id_animal?: string
    nome: string
    especie?: string | null
    sexo: $Enums.Sexo
    castracao: $Enums.SimNao
    vacina: $Enums.SimNao
    idade?: number | null
    porte: $Enums.Porte
    status?: $Enums.Status
    data_resgate?: Date | string | null
    observacoes?: string | null
    obersavacoes_medicas?: string | null
    raca?: string
  }

  export type AnimaisCreateOrConnectWithoutUsuarioInput = {
    where: AnimaisWhereUniqueInput
    create: XOR<AnimaisCreateWithoutUsuarioInput, AnimaisUncheckedCreateWithoutUsuarioInput>
  }

  export type AnimaisCreateManyUsuarioInputEnvelope = {
    data: AnimaisCreateManyUsuarioInput | AnimaisCreateManyUsuarioInput[]
  }

  export type AnimaisUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: AnimaisWhereUniqueInput
    update: XOR<AnimaisUpdateWithoutUsuarioInput, AnimaisUncheckedUpdateWithoutUsuarioInput>
    create: XOR<AnimaisCreateWithoutUsuarioInput, AnimaisUncheckedCreateWithoutUsuarioInput>
  }

  export type AnimaisUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: AnimaisWhereUniqueInput
    data: XOR<AnimaisUpdateWithoutUsuarioInput, AnimaisUncheckedUpdateWithoutUsuarioInput>
  }

  export type AnimaisUpdateManyWithWhereWithoutUsuarioInput = {
    where: AnimaisScalarWhereInput
    data: XOR<AnimaisUpdateManyMutationInput, AnimaisUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type AnimaisScalarWhereInput = {
    AND?: AnimaisScalarWhereInput | AnimaisScalarWhereInput[]
    OR?: AnimaisScalarWhereInput[]
    NOT?: AnimaisScalarWhereInput | AnimaisScalarWhereInput[]
    id_animal?: StringFilter<"Animais"> | string
    nome?: StringFilter<"Animais"> | string
    especie?: StringNullableFilter<"Animais"> | string | null
    sexo?: EnumSexoFilter<"Animais"> | $Enums.Sexo
    castracao?: EnumSimNaoFilter<"Animais"> | $Enums.SimNao
    vacina?: EnumSimNaoFilter<"Animais"> | $Enums.SimNao
    idade?: IntNullableFilter<"Animais"> | number | null
    porte?: EnumPorteFilter<"Animais"> | $Enums.Porte
    status?: EnumStatusFilter<"Animais"> | $Enums.Status
    data_resgate?: DateTimeNullableFilter<"Animais"> | Date | string | null
    observacoes?: StringNullableFilter<"Animais"> | string | null
    obersavacoes_medicas?: StringNullableFilter<"Animais"> | string | null
    raca?: StringFilter<"Animais"> | string
    id_usuario?: StringNullableFilter<"Animais"> | string | null
  }

  export type UsuarioCreateWithoutAnimaisInput = {
    id_usuario?: string
    nome: string
    email: string
    senha: string
    status?: $Enums.Status
  }

  export type UsuarioUncheckedCreateWithoutAnimaisInput = {
    id_usuario?: string
    nome: string
    email: string
    senha: string
    status?: $Enums.Status
  }

  export type UsuarioCreateOrConnectWithoutAnimaisInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutAnimaisInput, UsuarioUncheckedCreateWithoutAnimaisInput>
  }

  export type UsuarioUpsertWithoutAnimaisInput = {
    update: XOR<UsuarioUpdateWithoutAnimaisInput, UsuarioUncheckedUpdateWithoutAnimaisInput>
    create: XOR<UsuarioCreateWithoutAnimaisInput, UsuarioUncheckedCreateWithoutAnimaisInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutAnimaisInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutAnimaisInput, UsuarioUncheckedUpdateWithoutAnimaisInput>
  }

  export type UsuarioUpdateWithoutAnimaisInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type UsuarioUncheckedUpdateWithoutAnimaisInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type AnimaisCreateManyUsuarioInput = {
    id_animal?: string
    nome: string
    especie?: string | null
    sexo: $Enums.Sexo
    castracao: $Enums.SimNao
    vacina: $Enums.SimNao
    idade?: number | null
    porte: $Enums.Porte
    status?: $Enums.Status
    data_resgate?: Date | string | null
    observacoes?: string | null
    obersavacoes_medicas?: string | null
    raca?: string
  }

  export type AnimaisUpdateWithoutUsuarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    especie?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: EnumSexoFieldUpdateOperationsInput | $Enums.Sexo
    castracao?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    vacina?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    porte?: EnumPorteFieldUpdateOperationsInput | $Enums.Porte
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    data_resgate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    obersavacoes_medicas?: NullableStringFieldUpdateOperationsInput | string | null
    raca?: StringFieldUpdateOperationsInput | string
  }

  export type AnimaisUncheckedUpdateWithoutUsuarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    especie?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: EnumSexoFieldUpdateOperationsInput | $Enums.Sexo
    castracao?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    vacina?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    porte?: EnumPorteFieldUpdateOperationsInput | $Enums.Porte
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    data_resgate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    obersavacoes_medicas?: NullableStringFieldUpdateOperationsInput | string | null
    raca?: StringFieldUpdateOperationsInput | string
  }

  export type AnimaisUncheckedUpdateManyWithoutUsuarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    especie?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: EnumSexoFieldUpdateOperationsInput | $Enums.Sexo
    castracao?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    vacina?: EnumSimNaoFieldUpdateOperationsInput | $Enums.SimNao
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    porte?: EnumPorteFieldUpdateOperationsInput | $Enums.Porte
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    data_resgate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    obersavacoes_medicas?: NullableStringFieldUpdateOperationsInput | string | null
    raca?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}